{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","sortedGoods","goods","sort","revers","visibleGoods","g1","g2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","map","product","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KA0CMC,EAvBoB,SACxBC,EACAC,EACAC,GAEA,IAAMC,EAAY,YAAOH,GAezB,OAbAG,EAAaF,MAAK,SAACG,EAAIC,GACrB,OAAQJ,GACN,KAAKX,EAASgB,SACZ,OAAOF,EAAGG,cAAcF,GAE1B,KAAKf,EAASkB,OACZ,OAAOJ,EAAGK,OAASJ,EAAGI,OAExB,QACE,OAAO,MAINP,EAASC,EAAaO,UAAYP,EAGvBQ,CAAkBpB,EAAiBI,EAAUE,GAEjE,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYnB,IAAaL,EAASgB,WAGtCS,QAlDqB,WAC3BnB,EAAYN,EAASgB,WAwCjB,iCAcA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYnB,IAAaL,EAASkB,SAGtCO,QApEmB,WACzBnB,EAAYN,EAASkB,SA0DjB,4BAcA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAA2B,IAAfjB,IAGhBkB,QA1Ea,WACnBjB,GAAeD,IAgEX,qBAcEF,IAAaL,EAASI,OAASG,GAC/B,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QA/EU,WAClBnB,EAAYN,EAASI,MACrBI,GAAc,IA0ER,sBAUJ,6BACGC,EAAYiB,KAAI,SAAAC,GAAO,OACtB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC7HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.10a23dff.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const handleSortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleSortByAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleRevers = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const getReorderedGoods = (\n    goods: string[],\n    sort: SortType,\n    revers: boolean,\n  ) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((g1, g2) => {\n      switch (sort) {\n        case SortType.ALPHABET:\n          return g1.localeCompare(g2);\n\n        case SortType.LENGTH:\n          return g1.length - g2.length;\n\n        default:\n          return 0;\n      }\n    });\n\n    return revers ? visibleGoods.reverse() : visibleGoods;\n  };\n\n  const sortedGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={handleSortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={handleSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': isReversed === false,\n            },\n          )}\n          onClick={handleRevers}\n        >\n          Reverse\n        </button>\n\n        {(sortType === SortType.NONE && !isReversed) || (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(product => (\n          <li data-cy=\"Good\" key={product}>\n            {product}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}